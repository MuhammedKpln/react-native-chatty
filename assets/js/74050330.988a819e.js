"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9508],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return n?a.createElement(f,s(s({ref:t},u),{},{components:n})):a.createElement(f,s({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1398:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),s=["components"],i={},c="Bubble actions",l={unversionedId:"features/actions",id:"features/actions",title:"Bubble actions",description:"Actions",source:"@site/docs/features/actions.mdx",sourceDirName:"features",slug:"/features/actions",permalink:"/react-native-chatty/docs/features/actions",editUrl:"https://github.com/MuhammedKpln/react-native-chatty/tree/main/docs/docs/features/actions.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Usage",permalink:"/react-native-chatty/docs/getting-started/usage"},next:{title:"Haptic Feedback Support",permalink:"/react-native-chatty/docs/features/haptic-feedback"}},u={},p=[{value:"Install native dependencies",id:"install-native-dependencies",level:2},{value:"Usage",id:"usage",level:2}],d={toc:p};function m(e){var t=e.components,i=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"bubble-actions"},"Bubble actions"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Actions",src:n(7503).Z,width:"600",height:"1298"})),(0,o.kt)("p",null,"In order to get actions working, you'll need to install native modules."),(0,o.kt)("h2",{id:"install-native-dependencies"},"Install native dependencies"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"npm i react-native-context-menu-view")),(0,o.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Do not forget to run ",(0,o.kt)("inlineCode",{parentName:"p"},"pod install")," after installations."))),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, { useState, useEffect } from 'react';\nimport { Chatty, ChatEmitter } from 'react-native-chatty';\n\nexport default function MyReactPage() {\n  const [messages, setMessages] = useState()\n  const text = useRef()\n\n  useEffect(() => {\n\n    // Register action onPress handler\n    ChatEmitter.addListener('actionPressed', (index, message) => {\n      switch (index) {\n        case 0:\n          showToast(ToastStatus.Success, 'Message copied.')\n          break\n        case 1:\n          showToast(ToastStatus.Success, 'Message Removed.')\n          break\n      }\n    })\n\n    return () => {\n      ChatEmitter.removeAllListeners()\n    }\n  }, [props])\n\n  const onPressSend = (data) => {\n    // Implement\n\n    socket.send(data)\n  }\n\n  return (\n    <Chatty\n      messages={messages}\n      headerProps={{\n        id: 0,\n        username: \"Muhammed Kaplan\",\n        avatar: {\n          uri: \"https://blalala.com\"\n        }\n      }}\n      footerProps={{\n        // To prevent any unnecessary re-rendering, we're using ref instead of states.\n        onChangeText: (_text) => text.current = _text,\n        onPressSend\n      }}\n      bubbleProps={{\n        // Setup UI part of the application, there is no onPress prop available.\n        // You'll handle it by ChatEmitter, see example above.\n        actions: {\n            options: [\n              {\n                title: 'Copy message',\n                systemIcon: 'doc.on.doc',\n              },\n              {\n                title: 'Remove message',\n                systemIcon: 'trash',\n                destructive: true,\n              },\n            ],\n            cancelButtonLabel: 'Cancel',\n          },\n       }}\n    />\n  );\n}\n")))}m.isMDXComponent=!0},7503:function(e,t,n){t.Z=n.p+"assets/images/actions-bda6c535ba61985e0019b32dd5e1341f.gif"}}]);