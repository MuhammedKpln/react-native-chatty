"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9021],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=u(n),d=a,f=m["".concat(c,".").concat(d)]||m[d]||l[d]||o;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var u=2;u<o;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},340:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return l}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),s=["components"],i={},c="Replying message",u={unversionedId:"features/reply-support",id:"features/reply-support",title:"Replying message",description:"To enable reply support you need to provide to additional props, and everything should just work as intented.",source:"@site/docs/features/reply-support.md",sourceDirName:"features",slug:"/features/reply-support",permalink:"/react-native-chatty/docs/features/reply-support",editUrl:"https://github.com/MuhammedKpln/react-native-chatty/tree/main/docs/docs/features/reply-support.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Load Earlier Messages",permalink:"/react-native-chatty/docs/features/load-earlier-button"},next:{title:"Scroll to bottom",permalink:"/react-native-chatty/docs/features/scroll-to-bottom"}},p={},l=[{value:"Customize Reply drag element",id:"customize-reply-drag-element",level:2}],m={toc:l};function d(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"replying-message"},"Replying message"),(0,o.kt)("p",null,"To enable reply support you need to provide to additional props, and everything should just work as intented."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, { useState } from 'react';\nimport { Chatty } from 'react-native-chatty';\n\nexport default function MyReactPage() {\n  const [messages, setMessages] = useState()\n  const [replyingTo, setReplyingTo] = useState()\n  const text = useRef()\n\n  const onPressSend = (data) => {\n    // Implement\n\n    socket.send(data)\n  }\n\n  return (\n    <Chatty\n      messages={messages}\n      headerProps={{\n        id: 0,\n        username: \"Muhammed Kaplan\",\n        avatar: {\n          uri: \"https://blalala.com\"\n        }\n      }}\n      footerProps={{\n        // To prevent any unnecessary re-rendering, we're using ref instead of states.\n        onChangeText: (_text) => text.current = _text,\n        onPressSend\n      }}\n      // Handle onreply event, which in this case we're storing inside a state.\n      onReply={(message) => setReplyingTo(message) }\n\n      // Then provide message object we stored in state.\n      replyingTo={replyingTo}\n    />\n  );\n}\n")),(0,o.kt)("h2",{id:"customize-reply-drag-element"},"Customize Reply drag element"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, { useState } from 'react';\nimport { Chatty } from 'react-native-chatty';\n\nexport default function MyReactPage() {\n  const [messages, setMessages] = useState()\n  const text = useRef()\n\n  const onPressSend = (data) => {\n    // Implement\n\n    socket.send(data)\n  }\n\n  return (\n    <Chatty\n      messages={messages}\n      headerProps={{\n        id: 0,\n        username: \"Muhammed Kaplan\",\n        avatar: {\n          uri: \"https://blalala.com\"\n        }\n      }}\n      footerProps={{\n        // To prevent any unnecessary re-rendering, we're using ref instead of states.\n        onChangeText: (_text) => text.current = _text,\n        onPressSend\n      }}\n      bubbleProps={{\n        replyDragElement: <Image source={source} />\n      }}\n    />\n  );\n}\n")))}d.isMDXComponent=!0}}]);